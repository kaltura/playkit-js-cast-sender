{"version":3,"sources":["./cast/sender/webpack/bootstrap","./cast/sender/external [\"KalturaPlayer\"]","./cast/sender/./cast-state-manager.js","./cast/sender/./cast-tracks-manager.js","./cast/sender/./cast-playback-engine.js","./cast/sender/./ui-presets/idle.js","./cast/sender/./ui-presets/playback.js","./cast/sender/./ui-presets/ads.js","./cast/sender/./ui-presets/live.js","./cast/sender/./cast-ui.js","./cast/sender/./cast-loader.js","./cast/sender/./cast-ads-controller.js","./cast/sender/./cast-ads-manager.js","./cast/sender/./cast-player.js","./cast/sender/./index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","KalturaPlayer","State","core","FakeEvent","EventType","FakeEventTarget","StateType","CastStateManager","remotePlayer","remotePlayerController","_remotePlayer","_remotePlayerController","_currentState","IDLE","_previousState","_updateState","addEventListener","cast","framework","RemotePlayerEventType","PLAYER_STATE_CHANGED","this","duration","Date","now","playerState","toLowerCase","dispatchEvent","oldState","previousState","newState","currentState","reset","destroy","removeEventListener","TextStyleConverter","remote","Track","getLogger","TextStyle","AudioTrack","VideoTrack","TextTrack","Utils","TrackType","Error","TRACK_TYPE_TO_INSTANCE","AUDIO","VIDEO","TEXT","CastTracksManager","_logger","_castSession","CastContext","getInstance","getCurrentSession","_textStyle","_bindEvents","parseTracks","tracks","mediaInfo","length","castTextTracks","filter","type","chrome","media","castVideoTracks","castAudioTracks","textTracks","_parseTextTracks","videoTracks","_parseVideoTracks","audioTracks","_parseAudioTracks","_tracks","concat","_addTextTrackOffOption","debug","_startOnMediaStatusUpdateInterval","TRACKS_CHANGED","getTracks","copyDeep","_getTracksByType","getActiveTracks","video","find","track","active","audio","text","selectTrack","_selectVideoTrack","_selectAudioTrack","_selectTextTrack","hideTextTrack","offTrack","language","_stopOnMediaStatusUpdateInterval","_activeTrackIds","_mediaStatusIntervalId","setInterval","_onMediaStatusUpdate","INTERVAL_FREQUENCY","clearInterval","pushTextTrack","settings","id","trackId","index","label","kind","subType","push","inbandCastTextTracks","outbandCastTextTracks","forEach","trackContentId","some","inbandTrack","langComparer","warn","currentTrack","_selectTrack","VIDEO_TRACK_CHANGED","selectedVideoTrack","error","ERROR","Severity","RECOVERABLE","Category","CAST","Code","EDIT_TRACKS_INFO_ERROR","AUDIO_TRACK_CHANGED","selectedAudioTrack","CAST_EDIT_TRACKS_INFO_ERROR","TEXT_TRACK_CHANGED","selectedTextTrack","newTrack","onSuccess","onFailed","indexOf","splice","tracksInfoRequest","EditTracksInfoRequest","getMediaSession","editTracksInfo","_markActiveTrack","e","origTrack","localTextStyle","remoteTextStyle","mediaSession","activeTrackIds","every","includes","toCastTextStyle","textStyle","textTrackStyle","backgroundColor","fontFamily","fontScale","foregroundColor","style","toPlayerTextStyle","TEXT_STYLE_CHANGED","clone","CastPlaybackEngine","_toggleListeners","_liveCurrentTimeIntervalId","_resetFlags","_muted","_volume","play","playOrPause","pause","canPause","_paused","_currentTime","_duration","_seeking","_onCurrentTimeChanged","_onIsPausedChanged","_onDurationChanged","_onVolumeLevelChanged","_onIsMutedChanged","_onIsMediaLoadedChanged","_onLiveCurrentTimeChanged","listen","listeners","IS_MEDIA_LOADED_CHANGED","IS_PAUSED_CHANGED","DURATION_CHANGED","VOLUME_LEVEL_CHANGED","IS_MUTED_CHANGED","keys","CURRENT_TIME_CHANGED","isMediaLoadedEvent","MEDIA_INFO_CHANGED","onMediaInfoChanged","streamType","StreamType","LIVE","_mediaSession","currentTime","_maybeDispatchTimeUpdate","_maybeEndPlayback","_maybeEndLivePlayback","isPaused","PAUSE","PLAY","DURATION_CHANGE","volumeLevel","VOLUME_CHANGE","isMuted","MUTE_CHANGE","mute","muted","_seekTargetTime","_seekForward","SEEKED","TIME_UPDATE","delta","Math","round","ENDED","range","liveSeekableRange","isLiveDone","muteOrUnmute","canControlVolume","setVolumeLevel","canSeek","SEEKING","seek","savedPlayerState","ui","Components","h","IdleUI","className","playbackGuiWrapper","Loading","CastOverlay","displayName","preact","Fragment","Component","PlaybackUI","withKeyboardEvent","components","componentDidMount","props","updateIsKeyboardEnabled","render","playerGui","GuiArea","OverlayPortal","OverlayAction","PlaybackControls","centerPlaybackControls","BottomBar","leftControls","RewindControl","step","ForwardControl","TimeDisplayPlaybackContainer","format","rightControls","VolumeControl","LanguageControl","CastControl","FullscreenControl","SeekBarPlaybackContainer","showFramePreview","showTimeBubble","playerContainer","PrePlaybackPlayOverlay","CastAfterPlay","AdsUIComponent","adGuiWrapper","AdSkip","TopBar","AdNotice","AdLearnMore","TimeDisplayAdsContainer","LiveUI","LiveTag","SeekBarLivePlaybackContainer","CastUI","playbackUI","presets","liveUI","idleUI","adsUI","RemotePlayerUI","CastLoader","load","Promise","resolve","reject","window","isAvailable","_onGCastApiAvailable","_loadCastSDK","then","catch","Dom","loadScriptAsync","toString","CustomActionMessage","CustomActionType","CastAdsController","skipAd","sendMessage","CUSTOM_CHANNEL","SKIP_AD","EventManager","CastAdsManager","castPlayer","_castPlayer","_eventManager","_attachListeners","AD_MANIFEST_LOADED","_allAdsCompleted","AD_BREAK_START","_adBreak","AD_BREAK_END","ALL_ADS_COMPLETED","removeAll","Env","EngineType","AbrMode","BaseRemotePlayer","PlayerSnapshot","RemoteConnectedPayload","RemoteControl","RemoteDisconnectedPayload","RemoteAvailablePayload","RemoteSession","CustomMessageType","CustomMessage","CustomEventMessage","CastPlayer","castConfig","remoteControl","event","sessionState","SessionState","SESSION_STARTING","_remoteControl","onRemoteDeviceConnecting","SESSION_RESUMED","browser","major","os","SESSION_ENDING","onRemoteDeviceDisconnecting","SESSION_START_FAILED","onRemoteDeviceConnectFailed","_castRemotePlayer","isConnected","_setupRemotePlayer","_setupLocalPlayer","_isAvailable","_initializeCastApi","_initializeRemotePlayer","isSupported","loadMedia","options","ks","getPropertyPath","_playerConfig","_mediaInfo","_castMedia","setMedia","mediaConfig","getMediaInfo","getMediaConfig","sources","plugins","ready","_readyPromise","ended","_adsManager","adBreak","_engine","_loadOrSetMedia","_mediaInfoIntervalId","_reset","_firstPlay","_ended","_tracksManager","_stateManager","_createReadyPromise","PLAYER_RESET","_castRemotePlayerController","IS_CONNECTED_CHANGED","_isConnectedHandler","_castContext","CastContextEventType","SESSION_STATE_CHANGED","_sessionStateChangedHandler","_cleanSessionData","isLive","isOnLiveEdge","end","isMovingWindow","isDvr","startMinutes","start","_castConfig","liveEdgeThreshold","seekToLiveEdge","getStartTimeOfDvrWindow","startCasting","requestSession","isCastAvailable","stopCasting","endSession","getCastSession","_remoteSession","receiverApplicationId","DEFAULT_MEDIA_RECEIVER_APP_ID","autoJoinPolicy","AutoJoinPolicy","ORIGIN_SCOPED","castContext","setOptions","CAST_STATE_CHANGED","payload","castState","CastState","NO_DEVICES_AVAILABLE","onRemoteDeviceAvailable","RemotePlayer","RemotePlayerController","_destroyed","addMessageListener","customChannel","customMessage","_onCustomMessage","_ui","snapshot","getPlayerSnapshot","config","getSessionId","getCastDevice","friendlyName","getSessionState","SESSION_STARTED","onRemoteDeviceConnected","resuming","loadOptions","_getLoadOptions","_resumeSession","mediaObject","getUIWrapper","_playbackStarted","CHANGE_SOURCE_STARTED","MediaInfo","request","LoadRequest","option","mediaOption","customData","_onLoadMediaSuccess","_onLoadMediaFailed","onRemoteDeviceDisconnected","listenOnce","MEDIA_LOADED","_onEnded","_onPlayerStateChanged","allAdsCompleted","PLAYBACK_ENDED","PLAYING","_handleFirstPlay","CHANGE_SOURCE_ENDED","PLAYBACK_START","FIRST_PLAY","FIRST_PLAYING","paused","_triggerInitialPlayerEvents","SOURCE_SELECTED","selectedSource","url","contentUrl","mimetype","contentType","LOADED_METADATA","ABR_MODE_CHANGED","AUTO","CRITICAL","CAST_LOAD_MEDIA_FAILED","autoplay","playback","startTime","isEqual","audioLanguage","textLanguage","advertising","adTagUrl","_adsController","castAdvertising","vast","breakClipId","Generator","uniqueId","breakId","breakClips","position","vastAdsRequest","_getAdsRequest","breaks","breakClipIds","vmapAdsRequest","externalCaptions","_getExternalCaptions","captions","caption","endsWith","mergeDeep","trackContentType","adsRequest","adsResponse","parsedCustomMessage","JSON","parse","EVENT","_handleCustomEvent","CAST_CUSTOM_MESSAGE_PARSING_ERROR","customEvent","PLAYER_DESTROY","to","vol","volume","seeking","metadata","images","playbackRate","Type","registerRemotePlayer","NAME","__NAME__","VERSION","__VERSION__"],"mappings":"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","file":"playkit-cast-sender.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = KalturaPlayer;","//@flow\nimport {core} from 'kaltura-player-js';\n\nconst {State, FakeEvent, EventType, FakeEventTarget, StateType} = core;\n\nclass CastStateManager extends FakeEventTarget {\n  _currentState: State;\n  _previousState: State;\n  _remotePlayer: Object;\n  _remotePlayerController: Object;\n  _updateState: Function;\n\n  constructor(remotePlayer: Object, remotePlayerController: Object) {\n    super();\n    this._remotePlayer = remotePlayer;\n    this._remotePlayerController = remotePlayerController;\n    this._currentState = new State(StateType.IDLE);\n    this._previousState = new State(StateType.IDLE);\n    this._updateState = this._updateState.bind(this);\n    this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED, this._updateState);\n  }\n\n  _updateState(): void {\n    this._currentState.duration = Date.now() / 1000;\n    this._previousState = this._currentState;\n    if (this._remotePlayer.playerState) {\n      this._currentState = new State(this._remotePlayer.playerState.toLowerCase());\n    } else {\n      this._currentState = new State(StateType.IDLE);\n    }\n    this.dispatchEvent(\n      new FakeEvent(EventType.PLAYER_STATE_CHANGED, {\n        oldState: this.previousState,\n        newState: this.currentState\n      })\n    );\n  }\n\n  reset(): void {\n    this._currentState = new State(StateType.IDLE);\n    this._previousState = new State(StateType.IDLE);\n  }\n\n  destroy(): void {\n    this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED, this._updateState);\n    this._currentState = new State(StateType.IDLE);\n    this._previousState = new State(StateType.IDLE);\n  }\n\n  get currentState(): State {\n    return this._currentState;\n  }\n\n  get previousState(): State {\n    return this._previousState;\n  }\n}\n\nexport {CastStateManager};\n","// @flow\nimport {cast as remote, core} from 'kaltura-player-js';\nimport {INTERVAL_FREQUENCY} from './cast-player';\n\nconst {TextStyleConverter} = remote;\nconst {Track, getLogger, TextStyle, AudioTrack, VideoTrack, TextTrack, Utils, TrackType, EventType, FakeEvent, FakeEventTarget, Error} = core;\nconst TRACK_TYPE_TO_INSTANCE: {[type: string]: Track} = {\n  [TrackType.AUDIO]: AudioTrack,\n  [TrackType.VIDEO]: VideoTrack,\n  [TrackType.TEXT]: TextTrack\n};\n\nclass CastTracksManager extends FakeEventTarget {\n  _remotePlayer: Object;\n  _castSession: Object;\n  _textStyle: TextStyle;\n  _activeTrackIds: Array<number> = [];\n  _tracks: Array<Track> = [];\n  _mediaStatusIntervalId: ?IntervalID;\n  _onMediaStatusUpdate: Function;\n  _logger: any;\n\n  constructor(remotePlayer: Object) {\n    super();\n    this._remotePlayer = remotePlayer;\n    this._logger = getLogger('CastTracksManager');\n    this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n    this._textStyle = new TextStyle();\n    this._bindEvents();\n  }\n\n  parseTracks(): void {\n    const tracks = this._remotePlayer.mediaInfo.tracks;\n    if (tracks && tracks.length > 0) {\n      const castTextTracks = tracks.filter(t => t.type === chrome.cast.media.TrackType.TEXT);\n      const castVideoTracks = tracks.filter(t => t.type === chrome.cast.media.TrackType.VIDEO);\n      const castAudioTracks = tracks.filter(t => t.type === chrome.cast.media.TrackType.AUDIO);\n      const textTracks = this._parseTextTracks(castTextTracks);\n      const videoTracks = this._parseVideoTracks(castVideoTracks);\n      const audioTracks = this._parseAudioTracks(castAudioTracks);\n      this._tracks = audioTracks.concat(videoTracks).concat(textTracks);\n      this._addTextTrackOffOption();\n    }\n    this._logger.debug('Parse tracks', this._tracks);\n    this._startOnMediaStatusUpdateInterval();\n    this.dispatchEvent(new FakeEvent(EventType.TRACKS_CHANGED, {tracks: this._tracks}));\n  }\n\n  getTracks(type?: string): Array<Track> {\n    return Utils.Object.copyDeep(this._getTracksByType(type));\n  }\n\n  getActiveTracks(): Object {\n    return Utils.Object.copyDeep({\n      video: this._getTracksByType(TrackType.VIDEO).find(track => track.active),\n      audio: this._getTracksByType(TrackType.AUDIO).find(track => track.active),\n      text: this._getTracksByType(TrackType.TEXT).find(track => track.active)\n    });\n  }\n\n  selectTrack(track: ?Track): void {\n    if (track instanceof VideoTrack) {\n      this._selectVideoTrack(track);\n    } else if (track instanceof AudioTrack) {\n      this._selectAudioTrack(track);\n    } else if (track instanceof TextTrack) {\n      this._selectTextTrack(track);\n    }\n  }\n\n  hideTextTrack(): void {\n    const offTrack = this._tracks.find(t => t.language === 'off');\n    this.selectTrack(offTrack);\n  }\n\n  reset(): void {\n    this._stopOnMediaStatusUpdateInterval();\n    this._tracks = [];\n    this._activeTrackIds = [];\n  }\n\n  destroy(): void {\n    this._stopOnMediaStatusUpdateInterval();\n    this._tracks = [];\n    this._activeTrackIds = [];\n  }\n\n  set textStyle(style: TextStyle): void {\n    this._logger.debug('Setting text style', style);\n    const textTrackStyle = TextStyleConverter.toCastTextStyle(style);\n    const tracksInfoRequest = new chrome.cast.media.EditTracksInfoRequest(null, textTrackStyle);\n    const mediaSession = this._castSession.getMediaSession();\n    mediaSession.editTracksInfo(\n      tracksInfoRequest,\n      () => {\n        this._logger.debug('Setting text style succeed');\n        this._textStyle = style;\n        this.dispatchEvent(new FakeEvent(EventType.TEXT_STYLE_CHANGED, {textStyle: style}));\n      },\n      error => {\n        this._logger.debug('Setting text style failed', error);\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  get textStyle(): ?TextStyle {\n    return this._textStyle.clone();\n  }\n\n  _startOnMediaStatusUpdateInterval(): void {\n    if (!this._mediaStatusIntervalId) {\n      this._mediaStatusIntervalId = setInterval(this._onMediaStatusUpdate, INTERVAL_FREQUENCY);\n    }\n  }\n\n  _stopOnMediaStatusUpdateInterval(): void {\n    if (this._mediaStatusIntervalId) {\n      clearInterval(this._mediaStatusIntervalId);\n      this._mediaStatusIntervalId = null;\n    }\n  }\n\n  _bindEvents(): void {\n    this._onMediaStatusUpdate = this._onMediaStatusUpdate.bind(this);\n  }\n\n  _parseTextTracks(castTextTracks: Array<Object>): Array<TextTrack> {\n    const textTracks = [];\n    const pushTextTrack = track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        kind: track.subType || 'subtitles',\n        active: false\n      };\n      textTracks.push(new TextTrack(settings));\n    };\n    const inbandCastTextTracks = [];\n    const outbandCastTextTracks = [];\n    castTextTracks.forEach(track => {\n      if (track.trackContentId) {\n        outbandCastTextTracks.push(track);\n      } else {\n        inbandCastTextTracks.push(track);\n      }\n    });\n    inbandCastTextTracks.forEach(pushTextTrack);\n    outbandCastTextTracks.forEach(track => {\n      if (inbandCastTextTracks.some(inbandTrack => Track.langComparer(track.language, inbandTrack.language))) {\n        this._logger.warn('duplicated language, taking the inband option. Language: ', track.language);\n      } else {\n        pushTextTrack(track);\n      }\n    });\n    return textTracks;\n  }\n\n  _parseVideoTracks(castVideoTracks: Array<Object>): Array<VideoTrack> {\n    const videoTracks = [];\n    castVideoTracks.forEach(track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        active: false\n      };\n      videoTracks.push(new VideoTrack(settings));\n    });\n    return videoTracks;\n  }\n\n  _parseAudioTracks(castAudioTracks: Array<Object>): Array<AudioTrack> {\n    const audioTracks = [];\n    castAudioTracks.forEach(track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        active: false\n      };\n      audioTracks.push(new AudioTrack(settings));\n    });\n    return audioTracks;\n  }\n\n  _selectVideoTrack(track: VideoTrack): void {\n    this._stopOnMediaStatusUpdateInterval();\n    const currentTrack = this.getActiveTracks().video;\n    this._selectTrack(\n      track,\n      currentTrack,\n      () => {\n        this.dispatchEvent(new FakeEvent(EventType.VIDEO_TRACK_CHANGED, {selectedVideoTrack: track}));\n        this._startOnMediaStatusUpdateInterval();\n      },\n      error => {\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  _selectAudioTrack(track: AudioTrack): void {\n    this._stopOnMediaStatusUpdateInterval();\n    const currentTrack = this.getActiveTracks().audio;\n    this._selectTrack(\n      track,\n      currentTrack,\n      () => {\n        this.dispatchEvent(new FakeEvent(EventType.AUDIO_TRACK_CHANGED, {selectedAudioTrack: track}));\n        this._startOnMediaStatusUpdateInterval();\n      },\n      error => {\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.CAST_EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  _selectTextTrack(track: TextTrack): void {\n    this._stopOnMediaStatusUpdateInterval();\n    const currentTrack = this.getActiveTracks().text;\n    this._selectTrack(\n      track,\n      currentTrack,\n      () => {\n        this.dispatchEvent(new FakeEvent(EventType.TEXT_TRACK_CHANGED, {selectedTextTrack: track}));\n        this._startOnMediaStatusUpdateInterval();\n      },\n      error => {\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  _selectTrack(newTrack: Track, currentTrack: ?Track, onSuccess: Function, onFailed: Function): void {\n    this._logger.debug('Select track', newTrack, currentTrack, this._activeTrackIds);\n    if (currentTrack) {\n      const index = this._activeTrackIds.indexOf(currentTrack.id);\n      if (index > -1) {\n        this._activeTrackIds.splice(index, 1);\n      }\n    }\n    if (newTrack.id && newTrack.language !== 'off') {\n      this._activeTrackIds.push(newTrack.id);\n    }\n    const tracksInfoRequest = new chrome.cast.media.EditTracksInfoRequest(this._activeTrackIds);\n    const mediaSession = this._castSession.getMediaSession();\n    mediaSession.editTracksInfo(\n      tracksInfoRequest,\n      () => {\n        this._logger.debug('Select track succeeded');\n        this._markActiveTrack(currentTrack, false);\n        this._markActiveTrack(newTrack, true);\n        onSuccess();\n      },\n      e => {\n        this._logger.debug('Select track failed', e);\n        onFailed(e);\n      }\n    );\n  }\n\n  _markActiveTrack(track: ?Track, active: boolean): void {\n    if (track) {\n      const {id, language} = track;\n      const origTrack = this._tracks.find(t => t.id === id || (t.language === language && language === 'off'));\n      if (origTrack) {\n        origTrack.active = active;\n      }\n    }\n  }\n\n  _addTextTrackOffOption(): void {\n    const textTracks = this._getTracksByType(TrackType.TEXT);\n    if (textTracks && textTracks.length) {\n      this._tracks.push(\n        new TextTrack({\n          active: true,\n          index: textTracks.length,\n          kind: 'subtitles',\n          label: 'Off',\n          language: 'off'\n        })\n      );\n    }\n  }\n\n  _getTracksByType(type?: string): Array<Track> {\n    return !type\n      ? this._tracks\n      : this._tracks.filter(track => {\n          if (type && TRACK_TYPE_TO_INSTANCE[type]) {\n            return track instanceof TRACK_TYPE_TO_INSTANCE[type];\n          }\n          return true;\n        });\n  }\n\n  _onMediaStatusUpdate(): void {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      const isTextStyleChanged = () => {\n        const localTextStyle = TextStyleConverter.toCastTextStyle(this.textStyle);\n        const remoteTextStyle = mediaSession.media.textTrackStyle;\n        if (remoteTextStyle) {\n          return !(\n            localTextStyle.backgroundColor === remoteTextStyle.backgroundColor &&\n            localTextStyle.fontFamily === remoteTextStyle.fontFamily &&\n            localTextStyle.fontScale === remoteTextStyle.fontScale &&\n            localTextStyle.foregroundColor === remoteTextStyle.foregroundColor\n          );\n        }\n        return false;\n      };\n      const isActiveTrackIdsChanged = () => {\n        if (mediaSession.activeTrackIds) {\n          return !(\n            this._activeTrackIds.length === mediaSession.activeTrackIds.length &&\n            this._activeTrackIds.every((value, index) => value === mediaSession.activeTrackIds[index])\n          );\n        }\n        return false;\n      };\n      if (isActiveTrackIdsChanged()) {\n        const diffIds = mediaSession.activeTrackIds.filter(i => !this._activeTrackIds.includes(i));\n        diffIds.forEach(id => {\n          const track = this._tracks.find(t => t.id === id);\n          this.selectTrack(track);\n        });\n      }\n      if (isTextStyleChanged()) {\n        const style = TextStyleConverter.toPlayerTextStyle(mediaSession.media.textTrackStyle);\n        this._textStyle = style;\n        this.dispatchEvent(new FakeEvent(EventType.TEXT_STYLE_CHANGED, {textStyle: style}));\n      }\n    }\n  }\n}\n\nexport {CastTracksManager};\n","// @flow\nimport {core} from 'kaltura-player-js';\nimport {INTERVAL_FREQUENCY} from './cast-player';\n\nconst {EventType, FakeEvent, FakeEventTarget} = core;\n\nclass CastPlaybackEngine extends FakeEventTarget {\n  _remotePlayer: Object;\n  _remotePlayerController: Object;\n  _mediaSession: Object;\n  _muted: boolean = false;\n  _volume: number = 1;\n  _paused: boolean = false;\n  _currentTime: number = 0;\n  _duration: number = 0;\n  _seeking: boolean = false;\n  _seekForward: boolean;\n  _seekTargetTime: ?number;\n  _liveCurrentTimeIntervalId: IntervalID;\n  _onCurrentTimeChanged: Function;\n  _onIsPausedChanged: Function;\n  _onDurationChanged: Function;\n  _onVolumeLevelChanged: Function;\n  _onIsMutedChanged: Function;\n  _onIsMediaLoadedChanged: Function;\n  _onLiveCurrentTimeChanged: Function;\n\n  constructor(remotePlayer: Object, remotePlayerController: Object) {\n    super();\n    this._remotePlayer = remotePlayer;\n    this._remotePlayerController = remotePlayerController;\n    this._bindEvents();\n    this._toggleListeners(true);\n  }\n\n  reset(): void {\n    this._toggleListeners(false);\n    clearInterval(this._liveCurrentTimeIntervalId);\n    this._resetFlags();\n    this._toggleListeners(true);\n  }\n\n  destroy(): void {\n    clearInterval(this._liveCurrentTimeIntervalId);\n    this._toggleListeners(false);\n    this._muted = false;\n    this._volume = 1;\n    this._resetFlags();\n  }\n\n  play(): void {\n    this._remotePlayerController.playOrPause();\n  }\n\n  pause(): void {\n    if (this._remotePlayer.canPause) {\n      this._remotePlayerController.playOrPause();\n    }\n  }\n\n  set muted(value: boolean) {\n    if ((value && !this.muted) || (!value && this.muted)) {\n      this._remotePlayerController.muteOrUnmute();\n    }\n  }\n\n  set volume(value: number) {\n    if (this._remotePlayer.canControlVolume) {\n      this._remotePlayer.volumeLevel = value;\n      this._remotePlayerController.setVolumeLevel();\n    }\n  }\n\n  set currentTime(value: number) {\n    if (this._remotePlayer.canSeek) {\n      this._seeking = true;\n      this.dispatchEvent(new FakeEvent(EventType.SEEKING));\n      this._remotePlayer.currentTime = this._seekTargetTime = value;\n      this._seekForward = value > this.currentTime;\n      this._remotePlayerController.seek();\n    }\n  }\n\n  get duration(): ?number {\n    return this._duration;\n  }\n\n  get paused(): ?boolean {\n    if (this._remotePlayer.savedPlayerState) {\n      return this._remotePlayer.savedPlayerState.isPaused;\n    }\n    return this._paused;\n  }\n\n  get seeking(): ?boolean {\n    return this._seeking;\n  }\n\n  get muted(): ?boolean {\n    return this._muted;\n  }\n\n  get currentTime(): number {\n    if (this._remotePlayer.savedPlayerState) {\n      return this._remotePlayer.savedPlayerState.currentTime;\n    }\n    return this._currentTime;\n  }\n\n  get volume(): ?number {\n    return this._volume;\n  }\n\n  _resetFlags(): void {\n    this._paused = false;\n    this._currentTime = 0;\n    this._duration = 0;\n    this._seeking = false;\n  }\n\n  _bindEvents(): void {\n    this._onCurrentTimeChanged = this._onCurrentTimeChanged.bind(this);\n    this._onIsPausedChanged = this._onIsPausedChanged.bind(this);\n    this._onDurationChanged = this._onDurationChanged.bind(this);\n    this._onVolumeLevelChanged = this._onVolumeLevelChanged.bind(this);\n    this._onIsMutedChanged = this._onIsMutedChanged.bind(this);\n    this._onIsMediaLoadedChanged = this._onIsMediaLoadedChanged.bind(this);\n    this._onLiveCurrentTimeChanged = this._onLiveCurrentTimeChanged.bind(this);\n  }\n\n  _toggleListeners(listen: boolean): void {\n    const listeners = {\n      [cast.framework.RemotePlayerEventType.IS_MEDIA_LOADED_CHANGED]: this._onIsMediaLoadedChanged,\n      [cast.framework.RemotePlayerEventType.IS_PAUSED_CHANGED]: this._onIsPausedChanged,\n      [cast.framework.RemotePlayerEventType.DURATION_CHANGED]: this._onDurationChanged,\n      [cast.framework.RemotePlayerEventType.VOLUME_LEVEL_CHANGED]: this._onVolumeLevelChanged,\n      [cast.framework.RemotePlayerEventType.IS_MUTED_CHANGED]: this._onIsMutedChanged\n    };\n    if (listen) {\n      Object.keys(listeners).forEach(e => this._remotePlayerController.addEventListener(e, listeners[e]));\n    } else {\n      Object.keys(listeners).forEach(e => this._remotePlayerController.removeEventListener(e, listeners[e]));\n      this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED, this._onCurrentTimeChanged);\n    }\n  }\n\n  _onIsMediaLoadedChanged(isMediaLoadedEvent: Object): void {\n    const onMediaInfoChanged = () => {\n      this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, onMediaInfoChanged);\n      if (this._remotePlayer.mediaInfo.streamType === chrome.cast.media.StreamType.LIVE) {\n        this._mediaSession = cast.framework.CastContext.getInstance().getCurrentSession().getMediaSession();\n        this._liveCurrentTimeIntervalId = setInterval(this._onLiveCurrentTimeChanged, INTERVAL_FREQUENCY);\n      } else {\n        this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED, this._onCurrentTimeChanged);\n      }\n    };\n    if (isMediaLoadedEvent.value) {\n      this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, onMediaInfoChanged);\n    }\n  }\n\n  _onCurrentTimeChanged(): void {\n    this._currentTime = this._remotePlayer.currentTime;\n    this._maybeDispatchTimeUpdate();\n    this._maybeEndPlayback();\n  }\n\n  _onLiveCurrentTimeChanged(): void {\n    this._currentTime = this._mediaSession.currentTime;\n    this._maybeDispatchTimeUpdate();\n    this._maybeEndLivePlayback();\n  }\n\n  _onIsPausedChanged(): void {\n    this._paused = this._remotePlayer.isPaused;\n    if (this._paused) {\n      this.dispatchEvent(new FakeEvent(EventType.PAUSE));\n    } else {\n      this.dispatchEvent(new FakeEvent(EventType.PLAY));\n    }\n  }\n\n  _onDurationChanged(): void {\n    this._duration = this._remotePlayer.duration;\n    this.dispatchEvent(new FakeEvent(EventType.DURATION_CHANGE));\n  }\n\n  _onVolumeLevelChanged(): void {\n    this._volume = this._remotePlayer.volumeLevel;\n    this.dispatchEvent(new FakeEvent(EventType.VOLUME_CHANGE));\n  }\n\n  _onIsMutedChanged(): void {\n    this._muted = this._remotePlayer.isMuted;\n    this.dispatchEvent(new FakeEvent(EventType.MUTE_CHANGE, {mute: this.muted}));\n  }\n\n  _maybeDispatchTimeUpdate(): void {\n    if (!this._seeking) {\n      this.dispatchEvent(new FakeEvent(EventType.TIME_UPDATE));\n    } else if (\n      this._seekTargetTime &&\n      ((this._seekForward && this.currentTime >= this._seekTargetTime) || (!this._seekForward && this.currentTime <= this._seekTargetTime))\n    ) {\n      this._seeking = false;\n      this._seekTargetTime = null;\n      this.dispatchEvent(new FakeEvent(EventType.SEEKED));\n      this.dispatchEvent(new FakeEvent(EventType.TIME_UPDATE));\n    }\n  }\n\n  _maybeEndPlayback(): void {\n    const delta = Math.round(this._duration - this._currentTime);\n    if (this._currentTime !== 0 && this._duration !== 0 && delta <= 1) {\n      this._currentTime = this._duration;\n      this._paused = true;\n      this.dispatchEvent(new FakeEvent(EventType.ENDED));\n    }\n  }\n\n  _maybeEndLivePlayback(): void {\n    const range = this._mediaSession.liveSeekableRange;\n    if (range && range.isLiveDone) {\n      this._paused = true;\n      this.dispatchEvent(new FakeEvent(EventType.ENDED));\n    }\n  }\n}\n\nexport {CastPlaybackEngine};\n","//@flow\n/** @jsx h */\nimport {ui} from 'kaltura-player-js';\n\n// eslint-disable-next-line no-unused-vars\nconst {style, Components, h} = ui;\n// eslint-disable-next-line no-unused-vars\nconst PRESET_NAME = 'Idle';\n\n/**\n * Idle ui interface component\n *\n * @returns {React$Element} player ui tree\n */\nfunction IdleUI(): React$Element<any> {\n  return (\n    <div className={style.playbackGuiWrapper}>\n      <Components.Loading />\n      <Components.CastOverlay />\n    </div>\n  );\n}\n\nIdleUI.displayName = PRESET_NAME;\n\n/**\n * Idle ui interface\n *\n * @export\n * @param {*} props component props\n * @returns {React$Element} player ui tree\n */\nexport function idleUI(props: any): React$Element<any> {\n  return <IdleUI {...props} />;\n}\n","//@flow\n/** @jsx h */\nimport {ui} from 'kaltura-player-js';\n\n// eslint-disable-next-line no-unused-vars\nconst {style, Components, h, preact} = ui;\n// eslint-disable-next-line no-unused-vars\nconst {Fragment, Component} = preact;\nconst PRESET_NAME = 'Playback';\nconst withKeyboardEvent = ui.components.withKeyboardEvent;\n\n@withKeyboardEvent(PRESET_NAME)\nclass PlaybackUI extends Component {\n  /**\n   * @returns {void}\n   */\n  componentDidMount(): void {\n    const props = this.props;\n    props.updateIsKeyboardEnabled(true);\n  }\n\n  /**\n   * render component\n   *\n   * @returns {React$Element} - component element\n   * @memberof PlaybackUI\n   */\n  render() {\n    return (\n      <div className={style.playbackGuiWrapper}>\n        <Components.Loading />\n        <div className={style.playerGui} id=\"player-gui\">\n          <Components.GuiArea>\n            <Fragment>\n              <Components.OverlayPortal />\n              <Components.CastOverlay />\n              <Components.OverlayAction />\n              <Components.PlaybackControls className={style.centerPlaybackControls} />\n            </Fragment>\n            <Fragment>\n              <Components.BottomBar\n                leftControls={\n                  <Fragment>\n                    <Components.PlaybackControls />\n                    <Components.RewindControl step={10} />\n                    <Components.ForwardControl step={10} />\n                    <Components.TimeDisplayPlaybackContainer format=\"current / total\" />\n                  </Fragment>\n                }\n                rightControls={\n                  <Fragment>\n                    <Components.VolumeControl />\n                    <Components.LanguageControl />\n                    <Components.CastControl />\n                    <Components.FullscreenControl />\n                  </Fragment>\n                }>\n                <Components.SeekBarPlaybackContainer showFramePreview showTimeBubble playerContainer={this.props.playerContainer} />\n              </Components.BottomBar>\n            </Fragment>\n          </Components.GuiArea>\n        </div>\n        <Components.PrePlaybackPlayOverlay />\n        <Components.CastAfterPlay />\n      </div>\n    );\n  }\n}\n\nPlaybackUI.displayName = PRESET_NAME;\n\n/**\n * Playback ui interface\n *\n * @export\n * @param {*} props component props\n * @returns {React$Element} player ui tree\n */\nexport function playbackUI(props: any): React$Element<any> {\n  return <PlaybackUI {...props} />;\n}\n","//@flow\n/** @jsx h */\nimport {ui} from 'kaltura-player-js';\n\n// eslint-disable-next-line no-unused-vars\nconst {style, Components, h, preact} = ui;\n// eslint-disable-next-line no-unused-vars\nconst {Fragment} = preact;\nconst PRESET_NAME = 'Ads';\n\n/**\n * Ads ui interface component\n *\n * @param {*} props component props\n * @returns {?HTMLElement} player ui tree\n */\nfunction AdsUI(props: any): ?React$Element<any> {\n  props.updateIsKeyboardEnabled(true);\n  return (\n    <div className={style.adGuiWrapper}>\n      <Components.Loading />\n      <div className={style.playerGui} id=\"player-gui\">\n        <Components.GuiArea>\n          <Fragment>\n            <Components.CastOverlay />\n            <Components.OverlayAction />\n            <Components.PlaybackControls className={style.centerPlaybackControls} />\n            <Components.AdSkip />\n          </Fragment>\n          <Fragment>\n            <Components.TopBar\n              leftControls={\n                <Fragment>\n                  <Components.AdNotice />\n                </Fragment>\n              }\n              rightControls={\n                <Fragment>\n                  <Components.AdLearnMore />\n                </Fragment>\n              }\n            />\n            <Components.BottomBar\n              leftControls={\n                <Fragment>\n                  <Components.PlaybackControls />\n                  <Components.TimeDisplayAdsContainer />\n                </Fragment>\n              }\n              rightControls={\n                <Fragment>\n                  <Components.VolumeControl />\n                  <Components.CastControl />\n                  <Components.FullscreenControl />\n                </Fragment>\n              }\n            />\n          </Fragment>\n        </Components.GuiArea>\n      </div>\n    </div>\n  );\n}\n\nconst AdsUIComponent = Components.withKeyboardEvent(PRESET_NAME)(AdsUI);\nAdsUIComponent.displayName = PRESET_NAME;\n/**\n * Ads ui interface\n *\n * @export\n * @param {*} props component props\n * @returns {?HTMLElement} player ui tree\n */\nexport function adsUI(props: any): ?React$Element<any> {\n  return <AdsUIComponent {...props} />;\n}\n","//@flow\n/** @jsx h */\nimport {ui} from 'kaltura-player-js';\n\n// eslint-disable-next-line no-unused-vars\nconst {style, Components, h, preact} = ui;\n// eslint-disable-next-line no-unused-vars\nconst {Fragment, Component} = preact;\nconst PRESET_NAME = 'Live';\nconst withKeyboardEvent = ui.components.withKeyboardEvent;\n\n@withKeyboardEvent(PRESET_NAME)\nclass LiveUI extends Component {\n  /**\n   * @returns {void}\n   */\n  componentDidMount(): void {\n    const props = this.props;\n    props.updateIsKeyboardEnabled(true);\n  }\n\n  /**\n   * render component\n   *\n   * @returns {React$Element} - component element\n   * @memberof LiveUI\n   */\n  render() {\n    return (\n      <div className={style.playbackGuiWrapper}>\n        <Components.Loading />\n        <div className={style.playerGui} id=\"player-gui\">\n          <Components.GuiArea>\n            <Fragment>\n              <Components.OverlayPortal />\n              <Components.CastOverlay />\n              <Components.OverlayAction />\n              <Components.PlaybackControls className={style.centerPlaybackControls} />\n            </Fragment>\n            <Fragment>\n              <Components.BottomBar\n                leftControls={\n                  <Fragment>\n                    <Components.PlaybackControls />\n                    <Components.LiveTag />\n                  </Fragment>\n                }\n                rightControls={\n                  <Fragment>\n                    <Components.VolumeControl />\n                    <Components.LanguageControl />\n                    <Components.CastControl />\n                    <Components.FullscreenControl />\n                  </Fragment>\n                }>\n                <Components.SeekBarLivePlaybackContainer showFramePreview showTimeBubble playerContainer={this.props.playerContainer} />\n              </Components.BottomBar>\n            </Fragment>\n          </Components.GuiArea>\n        </div>\n        <Components.PrePlaybackPlayOverlay />\n        <Components.CastAfterPlay />\n      </div>\n    );\n  }\n}\n\nLiveUI.displayName = PRESET_NAME;\n\n/**\n * Live ui interface\n *\n * @export\n * @param {*} props component props\n * @returns {React$Element<any>} player ui tree\n */\nexport function liveUI(props: any): React$Element<any> {\n  return <LiveUI {...props} />;\n}\n","// @flow\n/** @jsx h */\nimport {cast} from 'kaltura-player-js';\nimport * as presets from './ui-presets';\n\nconst {RemotePlayerUI} = cast;\n\nclass CastUI extends RemotePlayerUI {\n  playbackUI(props: Object): any {\n    return presets.playbackUI(props);\n  }\n\n  liveUI(props: Object): any {\n    return presets.liveUI(props);\n  }\n\n  idleUI(): any {\n    return presets.idleUI();\n  }\n\n  adsUI(props: Object): any {\n    return presets.adsUI(props);\n  }\n}\n\nexport {CastUI};\n","// @flow\nimport {core} from 'kaltura-player-js';\n\nconst {Utils, getLogger} = core;\n\nconst SENDER_SDK_URL: string = '//www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1';\n\nclass CastLoader {\n  static _logger: any = getLogger('CastLoader');\n\n  static load(): Promise<*> {\n    return new Promise((resolve, reject) => {\n      window['__onGCastApiAvailable'] = isAvailable => CastLoader._onGCastApiAvailable(isAvailable, resolve);\n      CastLoader._loadCastSDK()\n        .then(() => CastLoader._logger.debug('Cast sender lib has been loaded successfully'))\n        .catch(e => {\n          CastLoader._logger.debug('Cast sender lib loading failed', e);\n          reject(e);\n        });\n    });\n  }\n\n  static _loadCastSDK(): Promise<*> {\n    if (window['cast'] && window['cast']['framework']) {\n      return Promise.resolve();\n    }\n    return Utils.Dom.loadScriptAsync(SENDER_SDK_URL);\n  }\n\n  static _onGCastApiAvailable(isAvailable: boolean, resolve: Function): void {\n    CastLoader._logger.debug(`onGCastApiAvailable, isAvailable: ${isAvailable.toString()}`);\n    if (isAvailable) {\n      resolve();\n    } else {\n      CastLoader._logger.debug(`Google cast API isn't available yet`);\n    }\n  }\n}\n\nexport {CastLoader};\n","// @flow\nimport {CUSTOM_CHANNEL} from './cast-player';\nimport {cast as remote} from 'kaltura-player-js';\n\nconst {CustomActionMessage, CustomActionType} = remote;\n\n/**\n * Cast Ads Controller.\n * @class CastAdsController\n */\nclass CastAdsController {\n  _castSession: Object;\n\n  constructor() {\n    this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n  }\n\n  /**\n   * Skips on an ad.\n   * @returns {void}\n   * @memberof CastAdsController\n   * @instance\n   */\n  skipAd(): void {\n    this._castSession.sendMessage(CUSTOM_CHANNEL, new CustomActionMessage(CustomActionType.SKIP_AD));\n  }\n}\n\nexport {CastAdsController};\n","// @flow\nimport {CastPlayer} from './cast-player';\nimport {core} from 'kaltura-player-js';\n\nconst {EventManager, EventType, FakeEventTarget} = core;\n\nclass CastAdsManager extends FakeEventTarget {\n  _castPlayer: CastPlayer;\n  _adBreak: boolean = false;\n  _allAdsCompleted: boolean = true;\n  _eventManager: EventManager;\n\n  constructor(castPlayer: CastPlayer) {\n    super();\n    this._castPlayer = castPlayer;\n    this._eventManager = new EventManager();\n    this._attachListeners();\n  }\n\n  _attachListeners(): void {\n    this._eventManager.listen(this._castPlayer, EventType.AD_MANIFEST_LOADED, () => {\n      this._allAdsCompleted = false;\n    });\n\n    this._eventManager.listen(this._castPlayer, EventType.AD_BREAK_START, () => {\n      this._adBreak = true;\n    });\n\n    this._eventManager.listen(this._castPlayer, EventType.AD_BREAK_END, () => {\n      this._adBreak = false;\n    });\n\n    this._eventManager.listen(this._castPlayer, EventType.ALL_ADS_COMPLETED, () => {\n      this._allAdsCompleted = true;\n    });\n  }\n\n  get adBreak(): boolean {\n    return this._adBreak;\n  }\n\n  get allAdsCompleted(): boolean {\n    return this._allAdsCompleted;\n  }\n\n  reset(): void {\n    this._eventManager.removeAll();\n    this._adBreak = false;\n    this._allAdsCompleted = true;\n    this._attachListeners();\n  }\n\n  destroy(): void {\n    this._adBreak = false;\n    this._allAdsCompleted = true;\n    this._eventManager.destroy();\n  }\n}\n\nexport {CastAdsManager};\n","// @flow\nimport {cast as remote, core} from 'kaltura-player-js';\nimport {CastStateManager} from './cast-state-manager';\nimport {CastTracksManager} from './cast-tracks-manager';\nimport {CastPlaybackEngine} from './cast-playback-engine';\nimport {CastUI} from './cast-ui';\nimport {CastLoader} from './cast-loader';\nimport {CastAdsController} from './cast-ads-controller';\nimport {CastAdsManager} from './cast-ads-manager';\n\nconst {Env, Track, TextStyle, EventType, StateType, FakeEvent, Utils, EngineType, AbrMode, Error} = core;\nconst {\n  BaseRemotePlayer,\n  PlayerSnapshot,\n  RemoteControl,\n  RemoteConnectedPayload,\n  RemoteDisconnectedPayload,\n  RemoteAvailablePayload,\n  RemoteSession,\n  TextStyleConverter,\n  CustomMessageType,\n  CustomMessage,\n  CustomEventMessage\n} = remote;\n\nexport const INTERVAL_FREQUENCY = 500;\nexport const SECONDS_TO_MINUTES_DIVIDER = 60;\nexport const CUSTOM_CHANNEL = 'urn:x-cast:com.kaltura.cast.playkit';\n\nclass CastPlayer extends BaseRemotePlayer {\n  /**\n   * The remote player type.\n   * @static\n   * @type {string}\n   * @memberof CastPlayer\n   * @override\n   */\n  static Type: string = 'chromecast';\n\n  /**\n   * @function isSupported\n   * @static\n   * @returns {boolean} - Whether the cast player is supported in the current runtime environment.\n   * @memberof CastPlayer\n   * @override\n   */\n  static isSupported(): boolean {\n    return Env.browser.name === 'Chrome' && Env.os.name !== 'iOS';\n  }\n\n  /**\n   * The default cast configuration.\n   * @static\n   * @type {Object}\n   * @memberof CastPlayer\n   * @override\n   */\n  static defaultConfig: Object = {\n    liveEdgeThreshold: 5\n  };\n\n  static _isAvailable: boolean = false;\n\n  _remoteSession: RemoteSession;\n  _castSession: Object;\n  _castContext: Object;\n  _castRemotePlayer: Object;\n  _castRemotePlayerController: Object;\n  _ui: CastUI;\n  _stateManager: CastStateManager;\n  _tracksManager: CastTracksManager;\n  _engine: CastPlaybackEngine;\n  _readyPromise: ?Promise<*> = null;\n  _mediaInfo: ?Object = null;\n  _firstPlay: boolean = true;\n  _ended: boolean = false;\n  _playbackStarted: boolean = false;\n  _reset: boolean = true;\n  _destroyed: boolean = true;\n  _mediaInfoIntervalId: IntervalID;\n  _adsController: CastAdsController;\n  _adsManager: CastAdsManager;\n\n  /**\n   * Cast Sender Player.\n   * @class CastPlayer\n   * @param {CastConfigObject} castConfig - The cast configuration.\n   * @param {RemoteControl} remoteControl - The remote control.\n   * @extends BaseRemotePlayer\n   */\n  constructor(castConfig: CastConfigObject, remoteControl: RemoteControl) {\n    super('CastPlayer', castConfig, remoteControl);\n    const loadPromise = new Promise((resolve, reject) => {\n      if (!CastPlayer._isAvailable) {\n        CastLoader.load()\n          .then(() => {\n            CastPlayer._isAvailable = true;\n            this._initializeCastApi();\n            resolve();\n          })\n          .catch(reject);\n      } else {\n        resolve();\n      }\n    });\n\n    loadPromise.then(() => this._initializeRemotePlayer()).catch(error => CastPlayer._logger.error('Cast initialized error', error));\n  }\n\n  /**\n   * Loads a media to the receiver application.\n   * @param {ProviderMediaInfoObject} mediaInfo - The entry media info.\n   * @param {Object} [options] - The request options. See {@link https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.LoadRequest|chrome.cast.media.LoadRequest}\n   * @returns {Promise<void>} - Promise to indicate load succeed or failed.\n   * @instance\n   * @memberof CastPlayer\n   */\n  loadMedia(mediaInfo: Object, options?: Object): Promise<*> {\n    CastPlayer._logger.debug('Load media', mediaInfo, options);\n    const ks = Utils.Object.getPropertyPath(this._playerConfig, 'session.ks');\n    if (!mediaInfo.ks && ks) {\n      mediaInfo.ks = ks;\n    }\n    this._mediaInfo = mediaInfo;\n    return this._castMedia({mediaInfo}, options);\n  }\n\n  /**\n   * Set a media to the receiver application.\n   * @param {ProviderMediaConfigObject} mediaConfig - The entry media config.\n   * @param {Object} [options] - The request options. See {@link https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.LoadRequest|chrome.cast.media.LoadRequest}\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  setMedia(mediaConfig: Object, options?: Object): void {\n    CastPlayer._logger.debug('Set media', mediaConfig, options);\n    this._castMedia({mediaConfig}, options);\n  }\n\n  /**\n   * Gets the media Info.\n   * @returns {ProviderMediaInfoObject} - The media info.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getMediaInfo(): ?Object {\n    return Utils.Object.copyDeep(this._mediaInfo);\n  }\n\n  /**\n   * Gets the media config.\n   * @returns {ProviderMediaConfigObject} - The media config.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getMediaConfig(): ?Object {\n    const mediaConfig = {\n      sources: this._playerConfig.sources,\n      plugins: this._playerConfig.plugins\n    };\n    return Utils.Object.copyDeep(mediaConfig);\n  }\n\n  /**\n   * The cast player readiness.\n   * @returns {Promise<*>} - Promise which resolved when the cast player is ready.\n   * @instance\n   * @memberof CastPlayer\n   */\n  ready(): Promise<*> {\n    return this._readyPromise ? this._readyPromise : Promise.resolve();\n  }\n\n  /**\n   * Start/resume playback.\n   * @instance\n   * @returns {void}\n   * @memberof CastPlayer\n   */\n  play(): void {\n    if (!this.ended || this._adsManager.adBreak) {\n      this._engine.play();\n    } else {\n      this._loadOrSetMedia({\n        mediaInfo: this._mediaInfo,\n        mediaConfig: this.getMediaConfig()\n      });\n    }\n  }\n\n  /**\n   * Pause playback.\n   * @instance\n   * @returns {void}\n   * @memberof CastPlayer\n   */\n  pause(): void {\n    this._engine.pause();\n  }\n\n  /**\n   * Stops and reset the cast player.\n   * @instance\n   * @returns {void}\n   * @memberof CastPlayer\n   */\n  reset(): void {\n    clearInterval(this._mediaInfoIntervalId);\n    if (this._reset) return;\n    this._reset = true;\n    this._firstPlay = true;\n    this._ended = false;\n    this._tracksManager.reset();\n    this._engine.reset();\n    this._adsManager.reset();\n    this._stateManager.reset();\n    this._createReadyPromise();\n    this.dispatchEvent(new FakeEvent(EventType.PLAYER_RESET));\n  }\n\n  /**\n   * Destroys the cast player.\n   * @instance\n   * @returns {void}\n   * @memberof CastPlayer\n   */\n  destroy(): void {\n    this._castRemotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.IS_CONNECTED_CHANGED, this._isConnectedHandler);\n    this._castContext.removeEventListener(cast.framework.CastContextEventType.SESSION_STATE_CHANGED, this._sessionStateChangedHandler);\n    this._cleanSessionData();\n  }\n\n  /**\n   * @returns {boolean} - Whether the current playback is a live playback.\n   * @instance\n   * @memberof CastPlayer\n   */\n  isLive(): boolean {\n    const mediaInfo = this._castRemotePlayer.mediaInfo;\n    return mediaInfo ? mediaInfo.streamType === chrome.cast.media.StreamType.LIVE : false;\n  }\n\n  /**\n   * Get whether the video is seeked to live edge in dvr\n   * @returns {boolean} - Whether the video is seeked to live edge in dvr\n   * @public\n   */\n  isOnLiveEdge(): boolean {\n    if (this.isLive()) {\n      const mediaSession = this._castSession.getMediaSession();\n      if (mediaSession) {\n        const {liveSeekableRange, currentTime} = mediaSession;\n        return currentTime >= liveSeekableRange.end && !!liveSeekableRange.isMovingWindow;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @returns {boolean} - Whether the current live playback has DVR window. In case of non-live playback will return false.\n   * @instance\n   * @memberof CastPlayer\n   */\n  isDvr(): boolean {\n    if (this.isLive()) {\n      const mediaSession = this._castSession.getMediaSession();\n      if (mediaSession) {\n        const range = mediaSession.liveSeekableRange;\n        if (range) {\n          const startMinutes = range.start / SECONDS_TO_MINUTES_DIVIDER;\n          const endMinutes = range.end / SECONDS_TO_MINUTES_DIVIDER;\n          return endMinutes - startMinutes > this._castConfig.liveEdgeThreshold;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Seeks to the live edge.\n   * @instance\n   * @returns {void}\n   * @memberof CastPlayer\n   */\n  seekToLiveEdge(): void {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      const range = mediaSession.liveSeekableRange;\n      if (range) {\n        this._engine.currentTime = range.end;\n      }\n    }\n  }\n\n  /**\n   * @returns {number} - The start time of the DVR window.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getStartTimeOfDvrWindow(): number {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      const range = mediaSession.liveSeekableRange;\n      if (range) {\n        return range.start;\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * @function enableAdaptiveBitrate\n   * @description Enables automatic adaptive bitrate switching.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n\n  /**\n   * @function isAdaptiveBitrateEnabled\n   * @returns {boolean} - Whether adaptive bitrate is enabled.\n   * @instance\n   * @memberof CastPlayer\n   */\n\n  /**\n   * @param {string} [type] - Track type.\n   * @returns {Array<Track>} - The cast player tracks.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getTracks(type?: string): Array<Track> {\n    return this._tracksManager.getTracks(type);\n  }\n\n  /**\n   * @returns {Object} - The cast player active tracks.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getActiveTracks(): Object {\n    return this._tracksManager.getActiveTracks();\n  }\n\n  /**\n   * Select a certain track to be active.\n   * @param {Track} track - The track to activate.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  selectTrack(track: ?Track): void {\n    this._tracksManager.selectTrack(track);\n  }\n\n  /**\n   * Hides the active text track.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  hideTextTrack(): void {\n    this._tracksManager.hideTextTrack();\n  }\n\n  /**\n   * Start casting.\n   * @returns {Promise<*>} - A promise to indicate session is starting, or failed\n   * @instance\n   * @memberof CastPlayer\n   */\n  startCasting(): Promise<*> {\n    return cast && cast.framework ? cast.framework.CastContext.getInstance().requestSession() : Promise.reject();\n  }\n\n  /**\n   * @returns {boolean} - Whether casting is available.\n   * @instance\n   * @memberof CastPlayer\n   */\n  isCastAvailable(): boolean {\n    return CastPlayer._isAvailable;\n  }\n\n  /**\n   * Stops the current cast session.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  stopCasting(): void {\n    this._castSession.endSession(true);\n  }\n\n  /**\n   * Gets the current remote session.\n   * @returns {RemoteSession} - The remote session.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getCastSession(): RemoteSession {\n    return Utils.Object.copyDeep(this._remoteSession);\n  }\n\n  /**\n   * @return {CastAdsController} - The cast ads controller.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get ads(): ?CastAdsController {\n    return this._adsController;\n  }\n\n  /**\n   * Setter.\n   * @param {TextStyle} style - The text style to set.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  set textStyle(style: TextStyle): void {\n    this._tracksManager.textStyle = style;\n  }\n\n  /**\n   * Getter.\n   * @returns {TextStyle} - The current text style.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get textStyle(): ?TextStyle {\n    return this._tracksManager.textStyle;\n  }\n\n  /**\n   * Setter.\n   * @param {number} to - The number to set in seconds.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  set currentTime(to: number): void {\n    this._engine.currentTime = to;\n  }\n\n  /**\n   * Getter.\n   * @returns {number} - The current time in seconds.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get currentTime(): ?number {\n    return this._engine.currentTime;\n  }\n\n  /**\n   * @returns {number} - The duration in seconds.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get duration(): ?number {\n    return this._engine.duration;\n  }\n\n  /**\n   * Setter.\n   * @param {number} vol - The volume to set in the range of 0-1.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  set volume(vol: number): void {\n    this._engine.volume = vol;\n  }\n\n  /**\n   * Getter.\n   * @returns {number} - The current volume in the range of 0-1.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get volume(): ?number {\n    return this._engine.volume;\n  }\n\n  /**\n   * @returns {boolean} - Whether the cast player is in paused state.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get paused(): ?boolean {\n    return this._engine.paused;\n  }\n\n  /**\n   * @returns {boolean} - Whether the cast player is in ended state.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get ended(): ?boolean {\n    return this._ended;\n  }\n\n  /**\n   * @returns {boolean} - Whether the cast player is in seeking state.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get seeking(): ?boolean {\n    return this._engine.seeking;\n  }\n\n  /**\n   * Setter.\n   * @param {boolean} mute - The mute value to set.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  set muted(mute: boolean): void {\n    this._engine.muted = mute;\n  }\n\n  /**\n   * Getter.\n   * @returns {boolean} - The muted state.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get muted(): ?boolean {\n    return this._engine.muted;\n  }\n\n  /**\n   * @returns {string} - The current playing source url.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get src(): ?string {\n    if (this._castRemotePlayer.mediaInfo) {\n      return this._castRemotePlayer.mediaInfo.contentUrl;\n    }\n    return '';\n  }\n\n  /**\n   * @returns {string} - The current poster url.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get poster(): string {\n    try {\n      return this._castRemotePlayer.mediaInfo.metadata.images[0].url;\n    } catch (e) {\n      return '';\n    }\n  }\n\n  /**\n   * @returns {string} - The current playback rate.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get playbackRate(): ?number {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      return mediaSession.playbackRate;\n    }\n    return null;\n  }\n\n  /**\n   * @returns {string} - The active engine type.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get engineType(): ?string {\n    return EngineType.CAST;\n  }\n\n  /**\n   * @returns {string} - The remote player type.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get type(): string {\n    return CastPlayer.Type;\n  }\n\n  /**\n   * @name config\n   * @returns {Object} - The runtime cast player config.\n   * @instance\n   * @memberof CastPlayer\n   */\n\n  _initializeCastApi(): void {\n    const options: Object = {};\n\n    options.receiverApplicationId = this._castConfig.receiverApplicationId || chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID;\n    options.autoJoinPolicy = this._castConfig.autoJoinPolicy || chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED;\n\n    CastPlayer._logger.debug('Init cast API with options', options);\n    const castContext = cast.framework.CastContext.getInstance();\n    castContext.setOptions(options);\n    castContext.addEventListener(cast.framework.CastContextEventType.CAST_STATE_CHANGED, event => {\n      const payload = new RemoteAvailablePayload(this, event.castState !== cast.framework.CastState.NO_DEVICES_AVAILABLE);\n      this._remoteControl.onRemoteDeviceAvailable(payload);\n    });\n  }\n\n  _initializeRemotePlayer(): void {\n    this._castContext = cast.framework.CastContext.getInstance();\n    this._castContext.addEventListener(cast.framework.CastContextEventType.SESSION_STATE_CHANGED, this._sessionStateChangedHandler);\n    this._castRemotePlayer = new cast.framework.RemotePlayer();\n    this._castRemotePlayerController = new cast.framework.RemotePlayerController(this._castRemotePlayer);\n    this._castRemotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.IS_CONNECTED_CHANGED, this._isConnectedHandler);\n  }\n\n  _setupRemotePlayer(): void {\n    CastPlayer._logger.debug('Setup remote player');\n    this._destroyed = false;\n    this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n    this._castSession.addMessageListener(CUSTOM_CHANNEL, (customChannel, customMessage) => this._onCustomMessage(customChannel, customMessage));\n    this._tracksManager = new CastTracksManager(this._castRemotePlayer);\n    this._engine = new CastPlaybackEngine(this._castRemotePlayer, this._castRemotePlayerController);\n    this._stateManager = new CastStateManager(this._castRemotePlayer, this._castRemotePlayerController);\n    this._adsManager = new CastAdsManager(this);\n    this._ui = new CastUI();\n    this._attachListeners();\n    const snapshot = this._remoteControl.getPlayerSnapshot();\n    this._playerConfig = snapshot.config;\n    this._remoteSession = new RemoteSession(\n      this._castSession.getSessionId(),\n      this._castSession.getCastDevice().friendlyName,\n      this._castSession.getSessionState() !== cast.framework.SessionState.SESSION_STARTED\n    );\n    const payload = new RemoteConnectedPayload(this, this._remoteSession, this._ui);\n    this._remoteControl.onRemoteDeviceConnected(payload);\n    if (this._remoteSession.resuming && !(Env.browser.major >= 73 && Env.os.name === 'Android')) {\n      // Android Chrome 73 and up gets SESSION_RESUMED also in the initial session\n      this._resumeSession();\n    } else if (snapshot) {\n      const loadOptions = this._getLoadOptions(snapshot);\n      this._loadOrSetMedia(snapshot, loadOptions);\n    }\n  }\n\n  _loadOrSetMedia(mediaObject: Object, options?: Object): void {\n    const {mediaInfo, mediaConfig} = mediaObject;\n    if (mediaInfo) {\n      this.loadMedia(mediaInfo, options);\n    } else if (mediaConfig) {\n      this.setMedia({sources: mediaObject.mediaConfig.sources, plugins: {}}, options);\n    }\n  }\n\n  _castMedia(mediaObject: Object, options?: Object): Promise<*> {\n    this.reset();\n    this._remoteControl.getUIWrapper().reset();\n\n    if (this._playbackStarted) {\n      this.dispatchEvent(new FakeEvent(EventType.CHANGE_SOURCE_STARTED));\n    }\n    const media = new chrome.cast.media.MediaInfo();\n    const request = new chrome.cast.media.LoadRequest(media);\n\n    if (options) {\n      Object.keys(options).forEach(option => {\n        if (option !== 'media') {\n          // $FlowFixMe\n          request[option] = options[option];\n        } else {\n          // $FlowFixMe\n          Object.keys(options.media).forEach(mediaOption => {\n            // $FlowFixMe\n            media[mediaOption] = options.media[mediaOption];\n          });\n        }\n      });\n    }\n\n    media.customData = media.customData || {};\n    media.customData.mediaInfo = mediaObject.mediaInfo;\n    media.customData.mediaConfig = mediaObject.mediaConfig;\n    return this._castSession.loadMedia(request).then(\n      () => this._onLoadMediaSuccess(),\n      error => this._onLoadMediaFailed(error)\n    );\n  }\n\n  _setupLocalPlayer(): void {\n    CastPlayer._logger.debug('Setup local player');\n    const snapshot = new PlayerSnapshot(this);\n    const payload = new RemoteDisconnectedPayload(this, snapshot);\n    this.pause();\n    this._cleanSessionData();\n    this._remoteControl.onRemoteDeviceDisconnected(payload);\n  }\n\n  _createReadyPromise(): void {\n    this._readyPromise = new Promise(resolve => {\n      this._eventManager.listenOnce(this, EventType.TRACKS_CHANGED, () => {\n        this.dispatchEvent(new FakeEvent(EventType.MEDIA_LOADED));\n        resolve();\n      });\n    });\n  }\n\n  _attachListeners(): void {\n    this._eventManager.listen(this._engine, EventType.TIME_UPDATE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.PAUSE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.PLAY, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.VOLUME_CHANGE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.MUTE_CHANGE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.DURATION_CHANGE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.ENDED, e => this._onEnded(e));\n    this._eventManager.listen(this._engine, EventType.SEEKING, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.SEEKED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.TRACKS_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.TEXT_TRACK_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.VIDEO_TRACK_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.AUDIO_TRACK_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.TEXT_STYLE_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.ERROR, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._stateManager, EventType.PLAYER_STATE_CHANGED, e => this._onPlayerStateChanged(e));\n  }\n\n  _onEnded(e: FakeEvent): void {\n    this._ended = true;\n    this.dispatchEvent(e);\n    if (this._adsManager.allAdsCompleted) {\n      this.dispatchEvent(new FakeEvent(EventType.PLAYBACK_ENDED));\n    } else {\n      this._eventManager.listenOnce(this, EventType.ALL_ADS_COMPLETED, () => {\n        this.dispatchEvent(new FakeEvent(EventType.PLAYBACK_ENDED));\n      });\n    }\n  }\n\n  _onPlayerStateChanged(e: FakeEvent): void {\n    if (this._ended) return;\n    if (this._stateManager.currentState.type === StateType.PLAYING) {\n      this.dispatchEvent(new FakeEvent(EventType.PLAYING));\n    }\n    this.dispatchEvent(e);\n  }\n\n  _handleFirstPlay(): void {\n    if (this._playbackStarted) {\n      this.dispatchEvent(new FakeEvent(EventType.CHANGE_SOURCE_ENDED));\n    }\n    this.dispatchEvent(new FakeEvent(EventType.PLAYBACK_START));\n    this.dispatchEvent(new FakeEvent(EventType.PLAY));\n    this.dispatchEvent(new FakeEvent(EventType.FIRST_PLAY));\n    this.dispatchEvent(new FakeEvent(EventType.FIRST_PLAYING));\n    this.dispatchEvent(new FakeEvent(EventType.PLAYING));\n    if (this.paused) {\n      this.dispatchEvent(new FakeEvent(EventType.PAUSE));\n    }\n    this._firstPlay = false;\n    this._playbackStarted = true;\n  }\n\n  _resumeSession(): void {\n    this._createReadyPromise();\n    this._mediaInfoIntervalId = setInterval(() => {\n      const mediaSession = this._castSession.getMediaSession();\n      if (mediaSession && mediaSession.customData) {\n        clearInterval(this._mediaInfoIntervalId);\n        this._mediaInfo = mediaSession.customData.mediaInfo;\n        CastPlayer._logger.debug('Resuming session with media info', this._mediaInfo);\n        this._onLoadMediaSuccess();\n      }\n    }, INTERVAL_FREQUENCY);\n  }\n\n  _onLoadMediaSuccess(): void {\n    CastPlayer._logger.debug('Load media success');\n    this._reset = false;\n    this._triggerInitialPlayerEvents();\n    this._tracksManager.parseTracks();\n    this._handleFirstPlay();\n  }\n\n  _triggerInitialPlayerEvents(): void {\n    this.dispatchEvent(\n      new FakeEvent(EventType.SOURCE_SELECTED, {\n        selectedSource: [\n          {\n            url: this._castRemotePlayer.mediaInfo.contentUrl,\n            mimetype: this._castRemotePlayer.mediaInfo.contentType\n          }\n        ]\n      })\n    );\n    this.dispatchEvent(new FakeEvent(EventType.LOADED_METADATA));\n    this.dispatchEvent(new FakeEvent(EventType.ABR_MODE_CHANGED, {mode: AbrMode.AUTO}));\n  }\n\n  _onLoadMediaFailed(error: Object): void {\n    CastPlayer._logger.debug('Load media falied', error);\n    this.dispatchEvent(\n      new FakeEvent(EventType.ERROR, new Error(Error.Severity.CRITICAL, Error.Category.CAST, Error.Code.CAST_LOAD_MEDIA_FAILED, error))\n    );\n  }\n\n  _getLoadOptions(snapshot: PlayerSnapshot): Object {\n    const loadOptions = {\n      autoplay: this._playerConfig.playback.autoplay,\n      currentTime: this._playerConfig.sources.startTime,\n      media: {}\n    };\n    if (this.textStyle && !this.textStyle.isEqual(snapshot.textStyle)) {\n      loadOptions.media.textTrackStyle = TextStyleConverter.toCastTextStyle(snapshot.textStyle);\n    }\n    loadOptions.media.customData = {\n      audioLanguage: this._playerConfig.playback.audioLanguage,\n      textLanguage: this._playerConfig.playback.textLanguage\n    };\n    if (snapshot.advertising && snapshot.advertising.adTagUrl) {\n      this._adsController = new CastAdsController();\n      const castAdvertising = this._castConfig.advertising;\n      if (!castAdvertising || !castAdvertising.vast) {\n        loadOptions.media.vmapAdsRequest = this._getAdsRequest(snapshot.advertising);\n      } else {\n        const breakClipId = Utils.Generator.uniqueId(5);\n        const breakId = Utils.Generator.uniqueId(5);\n        const breakClips = [\n          {\n            id: breakClipId,\n            position: 0,\n            vastAdsRequest: this._getAdsRequest(snapshot.advertising)\n          }\n        ];\n        const breaks = [\n          {\n            breakClipIds: [breakClipId],\n            id: breakId,\n            position: 0\n          }\n        ];\n        loadOptions.media.breakClips = breakClips;\n        loadOptions.media.breaks = breaks;\n      }\n    }\n    const externalCaptions = this._getExternalCaptions();\n    externalCaptions.length && (loadOptions.media.tracks = externalCaptions);\n    return loadOptions;\n  }\n\n  _getExternalCaptions() {\n    const externalCaptions = [];\n    if (this._playerConfig.sources.captions && this._playerConfig.sources.captions.length) {\n      this._playerConfig.sources.captions.forEach((caption, index) => {\n        if (caption.type === 'vtt' || caption.url.endsWith('.vtt')) {\n          let newTrack;\n          newTrack = new chrome.cast.media.Track(index + 1, chrome.cast.media.TrackType.TEXT);\n          Utils.Object.mergeDeep(newTrack, {\n            trackContentId: caption.url,\n            trackContentType: 'text/vtt',\n            name: caption.label,\n            language: caption.language\n          });\n          externalCaptions.push(newTrack);\n        } else {\n          CastPlayer._logger.warn(`Text track type ${caption.type} is unsupported by Cast receiver`);\n        }\n      });\n    }\n    return externalCaptions;\n  }\n\n  _getAdsRequest(advertising: Object): Object {\n    const adsRequest = {};\n    if (advertising.adTagUrl) {\n      adsRequest.adTagUrl = advertising.adTagUrl;\n    }\n    if (advertising.adsResponse) {\n      adsRequest.adsResponse = advertising.adsResponse;\n    }\n    return adsRequest;\n  }\n\n  _onCustomMessage(customChannel: string, customMessage: CustomMessage): void {\n    try {\n      const parsedCustomMessage = JSON.parse(customMessage);\n      CastPlayer._logger.debug('Custom message received', parsedCustomMessage);\n      switch (parsedCustomMessage.type) {\n        case CustomMessageType.EVENT:\n          this._handleCustomEvent(parsedCustomMessage);\n          break;\n      }\n    } catch (e) {\n      this.dispatchEvent(\n        new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.CAST_CUSTOM_MESSAGE_PARSING_ERROR, e))\n      );\n    }\n  }\n\n  _handleCustomEvent(customEvent: CustomEventMessage): void {\n    this.dispatchEvent(new FakeEvent(customEvent.event, customEvent.payload));\n  }\n\n  _sessionStateChangedHandler = (event: any) => {\n    switch (event.sessionState) {\n      case cast.framework.SessionState.SESSION_STARTING:\n        this._remoteControl.onRemoteDeviceConnecting();\n        break;\n      case cast.framework.SessionState.SESSION_RESUMED:\n        if (Env.browser.major >= 73 && Env.os.name === 'Android') {\n          this._remoteControl.onRemoteDeviceConnecting();\n        }\n        break;\n      case cast.framework.SessionState.SESSION_ENDING:\n        this._remoteControl.onRemoteDeviceDisconnecting();\n        break;\n      case cast.framework.SessionState.SESSION_START_FAILED:\n        this._remoteControl.onRemoteDeviceConnectFailed();\n        break;\n    }\n  };\n\n  _isConnectedHandler = () => {\n    if (this._castRemotePlayer.isConnected) {\n      this._setupRemotePlayer();\n    } else {\n      this._setupLocalPlayer();\n    }\n  };\n\n  _cleanSessionData(): void {\n    clearInterval(this._mediaInfoIntervalId);\n    if (this._destroyed) return;\n    this._destroyed = true;\n    this._firstPlay = true;\n    this._ended = false;\n    this._readyPromise = null;\n    this._eventManager.destroy();\n    this._tracksManager.destroy();\n    this._engine.destroy();\n    this._adsManager.destroy();\n    this._stateManager.destroy();\n    this.dispatchEvent(new FakeEvent(EventType.PLAYER_DESTROY));\n  }\n}\n\nexport {CastPlayer};\n","// @flow\nimport {CastPlayer} from './cast-player';\nimport {cast} from 'kaltura-player-js';\n\nconst {registerRemotePlayer} = cast;\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\n\nconst NAME = __NAME__;\nconst VERSION = __VERSION__;\n\nexport {CastPlayer as RemotePlayer};\nexport {VERSION, NAME};\n\nif (CastPlayer.isSupported()) {\n  registerRemotePlayer(CastPlayer.Type, CastPlayer);\n}\n"],"sourceRoot":""}